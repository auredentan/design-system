@import "./variables";

/// Icon button base mixin to reset native styles and apply global structure.
@mixin lx-icon-button-base() {
    position: relative;
    display: inline-flex;
    overflow: hidden;
    width: $lx-icon-button-size * 2;
    height: $lx-icon-button-size * 2;
    align-items: center;
    justify-content: center;
    border: none;
    background-color: transparent;
    border-radius: 50%;
    font-size: lx-typography-to-rem($lx-icon-button-size);
    line-height: inherit;
    outline: none;
    text-decoration: none;
    user-select: none;
    vertical-align: middle;

    &:hover {
        cursor: pointer;
    }

    &:disabled {
        cursor: default;
        pointer-events: none;
    }
}

/// Icon button theme mixin to style icon button regarding the theme.
///
/// @param {String} $theme - The button theme, either dark or light
@mixin lx-icon-button-theme($theme) {
    @if $theme == dark {
        color: #000;

        &:hover::before {
            background-color: rgba(#000, map-get($lx-ripple-light-opacities, hover));
        }

        &:focus::before {
            background-color: rgba(#000, map-get($lx-ripple-light-opacities, focus));
        }

        #{$lx-ripple-identifier} {
            background-color: rgba(#000, map-get($lx-ripple-light-opacities, ripple));
        }

        &:disabled {
            color: rgba(#000, map-get($lx-theme-dark-text-opacities, disabled));
        }
    }

    @if $theme == light {
        color: #fff;

        &:hover::before {
            background-color: rgba(#fff, map-get($lx-ripple-dark-opacities, hover));
        }

        &:focus::before {
            background-color: rgba(#fff, map-get($lx-ripple-dark-opacities, focus));
        }

        #{$lx-ripple-identifier} {
            background-color: rgba(#fff, map-get($lx-ripple-dark-opacities, ripple));
        }

        &:disabled {
            color: rgba(#fff, map-get($lx-theme-dark-text-opacities, disabled));
        }
    }
}
