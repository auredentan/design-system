@import "./variables";

/// Button base mixin to reset native styles and apply global structure.
@mixin lx-button-base() {
    @include lx-typography(button);

    position: relative;
    display: inline-flex;
    overflow: hidden;
    min-width: $lx-button-min-width;
    height: $lx-button-height;
    align-items: center;
    justify-content: center;
    border: none;
    border-radius: 4px;
    line-height: inherit;
    outline: none;
    text-decoration: none;
    user-select: none;
    vertical-align: middle;

    &:hover {
        cursor: pointer;
    }

    &:disabled {
        color: rgba(#000, map-get($lx-theme-text-opacities, disabled));
        cursor: default;
        pointer-events: none;
    }
}

/// Button theme mixin to style button regarding the theme and the type.
///
/// @param {String} $theme - The button theme, either primary or secondary
/// @param {String} $type - The button type, either text or contained
@mixin lx-button-theme($theme, $type) {
    @if $type == text {
        padding: 0 $lx-button-text-horizontal-padding;
        background-color: transparent;
        color: map-get($lx-theme-colors, $theme);

        &:hover::before {
            background-color: rgba(map-get($lx-theme-colors, $theme), map-get($lx-ripple-light-opacities, hover));
        }

        &:focus::before {
            background-color: rgba(map-get($lx-theme-colors, $theme), map-get($lx-ripple-light-opacities, focus));
        }

        #{$lx-ripple-identifier} {
            background-color: rgba(map-get($lx-theme-colors, $theme), map-get($lx-ripple-light-opacities, ripple));
        }
    }

    @if $type == contained {
        padding: 0 $lx-button-contained-horizontal-padding;
        background-color: map-get($lx-theme-colors, $theme);
        color: map-get($lx-theme-colors, #{on-}$theme);

        &:hover::before {
            background-color: rgba(#fff, map-get($lx-ripple-dark-opacities, hover));
        }

        &:focus::before {
            background-color: rgba(#fff, map-get($lx-ripple-dark-opacities, focus));
        }

        #{$lx-ripple-identifier} {
            background-color: rgba(#fff, map-get($lx-ripple-dark-opacities, ripple));
        }

        &:disabled {
            background-color: rgba(#000, 0.12);
        }
    }
}

/// Button icon mixin to style an icon within a button.
///
/// @param {String} $type - The button type, either text or contained
@mixin lx-button-icon($type) {
    margin-right: $lx-base-spacing-unit;
    font-size: lx-typography-to-rem(18px);

    @if $type == contained {
        margin-left: -($lx-base-spacing-unit / 2);
    }
}
