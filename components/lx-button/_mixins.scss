@import "./variables";

/// Button base mixin to reset native styles and apply global structure
@mixin lx-button-base() {
    position: relative;
    display: inline-flex;
    overflow: hidden;
    align-items: center;
    justify-content: center;
    border: none;
    outline: none;
    text-decoration: none;
    user-select: none;
    vertical-align: middle;

    &:hover {
        box-shadow: none !important;
        cursor: pointer;
    }

    &:disabled {
        cursor: default;
        pointer-events: none;
    }

    &__text {
        font-weight: 600;
    }
}

/// Button size mixin to style button regarding the size and the type
///
/// @param {String} $size - The button size, either s, m or l
/// @param {String} $type - The button type, either primary or secondary
@mixin lx-button-size($size, $type) {
    height: map-get($lx-button-sizes, $size);
    border-radius: map-get($lx-button-sizes, $size) / 2;

    &.lx-button--shape-standard {
        padding: 0 $lx-button-horizontal-padding;
    }

    &.lx-button--shape-circle {
        width: map-get($lx-button-sizes, $size);
    }

    .lx-button__icon {
        font-size: lx-typography-to-rem(map-get($lx-button-icon-sizes, $size));
    }

    .lx-button__icon--has-sibling {
        margin-right: $lx-base-spacing-unit;
    }

    .lx-button__text {
        font-size: lx-typography-to-rem(map-get($lx-button-text-sizes, $size));

        @if $type == primary {
            line-height: lx-typography-to-rem(map-get($lx-button-sizes, $size));
        }

        @if $type == secondary {
            line-height: lx-typography-to-rem(map-get($lx-button-sizes, $size) - 2);
        }
    }
}

/// Button color mixin to style button regarding the theme and the type
///
/// @param {String} $color - The button color, either primary, secondary or colors from the color palette
/// @param {String} $type - The button type, either primary or secondary
@mixin lx-button-color($color, $type) {
    @if $type == primary {
        $lx-button-primary-color: map-get($lx-theme-color-palette, $color);

        background-color: $lx-button-primary-color;
        color: lx-theme-pick-best-color($lx-button-primary-color);
        transition: background-color $lx-button-transition-duration, box-shadow $lx-button-transition-duration;

        &:hover {
            @if lightness($lx-button-primary-color) > 50% {
                background-color: darken($lx-button-primary-color, 10%);
            }

            @else {
                background-color: lighten($lx-button-primary-color, 10%);
            }
        }

        &:active {
            @if lightness($lx-button-primary-color) > 50% {
                background-color: darken($lx-button-primary-color, 20%);
            }

            @else {
                background-color: lighten($lx-button-primary-color, 20%);
            }
        }

        &:disabled {
            background-color: rgba($lx-button-primary-color, 0.4);
        }

        &[data-focus-visible-added] {
            box-shadow: 0 0 0 2px rgba($lx-button-primary-color, 0.4);
        }
    }

    @if $type == secondary {
        $lx-button-secondary-color: $lx-theme-body-dark;

        border: 1px solid $lx-button-secondary-color;
        color: $lx-button-secondary-color;
        transition: border-color $lx-button-transition-duration, box-shadow $lx-button-transition-duration, color $lx-button-transition-duration;

        &:hover {
            border-color: lighten($lx-button-secondary-color, 20%);
            color: lighten($lx-button-secondary-color, 20%);
        }

        &:active {
            border-color: lighten($lx-button-secondary-color, 40%);
            color: lighten($lx-button-secondary-color, 40%);
        }

        &:disabled {
            border-color: rgba($lx-button-secondary-color, 0.4);
            color: rgba($lx-button-secondary-color, 0.4);
        }

        &[data-focus-visible-added] {
            box-shadow: 0 0 0 2px rgba($lx-button-secondary-color, 0.4);
        }
    }
}
