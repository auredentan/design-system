@import "./variables";

/// Button base mixin to reset native styles and apply global structure
@mixin lx-button-base() {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: none;
    outline: none;
    text-decoration: none;
    user-select: none;
    vertical-align: middle;

    &:hover {
        cursor: pointer;
    }

    &:disabled {
        cursor: default;
        pointer-events: none;
    }

    &__text {
        font-weight: 600;
    }
}

/// Button size mixin to style button regarding the size and the type
///
/// @param {String} $size - The button size, either s, m or l
/// @param {String} $type - The button type, either primary or secondary
@mixin lx-button-size($size, $type) {
    height: map-get($lx-button-sizes, $size);
    border-radius: map-get($lx-button-sizes, $size) / 2;

    &.lx-button--shape-standard {
        padding: 0 $lx-button-horizontal-padding;
    }

    &.lx-button--shape-circle {
        width: map-get($lx-button-sizes, $size);
    }

    .lx-button__icon {
        font-size: map-get($lx-button-icon-sizes, $size);
    }

    .lx-button__icon--has-sibling {
        margin-right: $lx-base-spacing-unit;
    }

    .lx-button__text {
        font-size: map-get($lx-button-text-sizes, $size);

        @if $type == primary {
            line-height: map-get($lx-button-sizes, $size);
        }

        @if $type == secondary {
            line-height: map-get($lx-button-sizes, $size) - 2;
        }
    }

    &::after {
        position: absolute;
        border-color: transparent;
        border-radius: (map-get($lx-button-sizes, $size) + 8) / 2;
        border-style: dotted;
        border-width: 2px;
        content: '';
        pointer-events: none;
        transition: border-color $lx-button-transition-duration;
    }

    @if $type == primary {
        &::after {
            top: -4px;
            right: -4px;
            bottom: -4px;
            left: -4px;
        }
    }

    @if $type == secondary {
        &::after {
            top: -5px;
            right: -5px;
            bottom: -5px;
            left: -5px;
        }
    }
}

/// Button color mixin to style button regarding the theme and the type
///
/// @param {String} $color - The button color, either primary, secondary or colors from the color palette
/// @param {String} $type - The button type, either primary or secondary
/// @param {String} $theme - The button theme, either light or dark
@mixin lx-button-color($color, $type, $theme: light) {
    transition: background-color $lx-button-transition-duration;

    @if $type == primary {
        $lx-button-primary-color-default: lx-theme-color-variant($color, 500);
        $lx-button-primary-color-hover: lx-theme-color-variant($color, 600);
        $lx-button-primary-color-active: lx-theme-color-variant($color, 700);

        @if $theme == light {
            background-color: $lx-button-primary-color-default;
            color: lx-theme-best-color($lx-button-primary-color-default);
        }

        @else {
            background-color: $lx-theme-light;
            color: $lx-button-primary-color-default;
        }

        &:hover {
            @if $theme == light {
                background-color: $lx-button-primary-color-hover;
            }

            @else {
                background-color: rgba($lx-theme-light, 0.9);
            }
        }

        &:active {
            @if $theme == light {
                background-color: $lx-button-primary-color-active;
            }

            @else {
                background-color: rgba($lx-theme-light, 0.8);
            }
        }

        &:disabled {
            @if $theme == light {
                background-color: lx-theme-emphasis($lx-button-primary-color-default, low);
            }

            @else {
                background-color: lx-theme-emphasis($lx-theme-light, low);
                color: lx-theme-emphasis($lx-theme-light, medium);
            }
        }

        &[data-focus-visible-added] {
            @if $theme == light {
                &::after {
                    border-color: lx-theme-emphasis($lx-button-primary-color-default, medium);
                }
            }

            @else {
                &::after {
                    border-color: lx-theme-emphasis($lx-theme-light, medium);
                }
            }
        }
    }

    @if $type == secondary {
        background-color: transparent;

        @if $theme == light {
            border: 1px solid $lx-theme-dark;
            color: $lx-theme-dark;
        }

        @else {
            border: 1px solid $lx-theme-light;
            color: $lx-theme-light;
        }

        &:hover {
            @if $theme == light {
                background-color: rgba($lx-theme-dark, 0.05);
            }

            @else {
                background-color: rgba($lx-theme-light, 0.1);
            }
        }

        &:active {
            @if $theme == light {
                background-color: rgba($lx-theme-dark, 0.1);
            }

            @else {
                background-color: rgba($lx-theme-light, 0.2);
            }
        }

        &:disabled {
            @if $theme == light {
                border-color: lx-theme-emphasis($lx-theme-dark, low);
                color: lx-theme-emphasis($lx-theme-dark, low);
            }

            @else {
                border-color: lx-theme-emphasis($lx-theme-light, low);
                color: lx-theme-emphasis($lx-theme-light, low);
            }
        }

        &[data-focus-visible-added] {
            @if $theme == light {
                &::after {
                    border-color: lx-theme-emphasis($lx-theme-dark, medium);
                }
            }

            @else {
                &::after {
                    border-color: lx-theme-emphasis($lx-theme-light, medium);
                }
            }
        }
    }
}
