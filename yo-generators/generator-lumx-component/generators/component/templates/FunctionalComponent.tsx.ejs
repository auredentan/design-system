import React from 'react';

import classNames from 'classnames';

import { COMPONENT_PREFIX } from 'LumX/core/react/constants';
<% if (validateComponent) { -%>
import {
    <%_ if (transformChild) { -%>
    ChildTransformParameters,
    <%_ } -%>
    <%_ if (validateChild) { -%>
    ChildValidateParameters,
    <%_ } -%>
    IGenericProps,
    <%_ if (preValidate || postValidate) { -%>
    ValidateParameters,
    <%_ } -%>
    getRootClassName,
    <%_ if (checkChildrenTypes) { -%>
    isElementOfType,
    isElementText,
    <%_ } -%>
    validateComponent,
} from 'LumX/core/react/utils';
<% } else { %>
import { IGenericProps, getRootClassName } from 'LumX/core/react/utils';
<% } -%>
import { handleBasicClasses } from 'LumX/core/utils';

/////////////////////////////

/**
 * Defines the props of the component.
 */
interface I<%= componentName %>Props extends IGenericProps {}
type <%= componentName %>Props = I<%= componentName %>Props;

/////////////////////////////

/////////////////////////////
//                         //
//    Public attributes    //
//                         //
/////////////////////////////

/**
 * The display name of the component.
 */
const COMPONENT_NAME = `${COMPONENT_PREFIX}<%= componentName %>`;

/**
 * The default class name and classes prefix for this component.
 */
const CLASSNAME = getRootClassName(COMPONENT_NAME);

/**
 * The default value of props.
 */
const DEFAULT_PROPS: Partial<<%= componentName %>Props> = {};
<% if (validateComponent) { -%>

/////////////////////////////
//                         //
//    Private functions    //
//                         //
/////////////////////////////
<% if (postValidate) { -%>

/**
 * Globally validate the component after transforming and/or validating the children.
 *
 * @param   params The children, their number and the props of the component.
 * @return  If a string, the error message.
 *          If a boolean, `true` means a successful validation, `false` a bad validation (which will
 *          lead to throw a basic error message).
 *          You can also return nothing if there is no special problem (i.e. a successful validation).
 */
function _postValidate({ children, childrenCount, props }: ValidateParameters): string | boolean | void {
    // Do your post-validation here.

    return true;
}
<% } -%>
<% if (preValidate) { -%>

/**
 * Globally validate the component before transforming and/or validating the children.
 *
 * @param   params The children, their number and the props of the component.
 * @return  If a string, the error message.
 *          If a boolean, `true` means a successful validation, `false` a bad validation (which will
 *          lead to throw a basic error message).
 *          You can also return nothing if there is no special problem (i.e. a successful validation).
 */
function _preValidate({ children, childrenCount, props }: ValidateParameters): string | boolean | void {
    // Do your pre-validation here.

    return true;
}
<% } -%>
<% if (transformChild) { -%>

/**
 * Transform a child of the component.
 *
 * @param  params The parameters received from the `validateComponent` function.
 * @return The transformed child (or the original one if there is no transformation to do).
 */
function _transformChild({
    child,
    children,
    childrenCount,
    index,
    props,
}: ChildTransformParameters): React.ReactNode {
    // Do your transformation here. Here is an example:
    if (typeof child === 'string') {
        return <span>{child}</span>;
    }

    return child;
}
<% } -%>
<% if (validateChild) { -%>

/**
 * Validate a child of the component after its transformation.
 *
 * @param  params The parameters received from the `validateComponent` function.
 * @return If a string, the error message.
 *         If a boolean, `true` means a successful validation, `false` a bad validation (which
 *         will lead to throw a basic error message).
 *         You can also return nothing if there is no special problem (i.e. a successful validation).
 */
function _validateChild({
    child,
    children,
    childrenCount,
    index,
    props,
}: ChildValidateParameters): string | boolean | void {
    // Do your validation here.

    return true;
}
<% } -%>

/**
 * Validate the component props and children.
 * Also, sanitize, cleanup and format the children and return the processed ones.
 *
 * @param  props The children and props of the component.
 * @return The processed children of the component.
 */
function _validate(props: <%= componentName %>Props): React.ReactNode {
    return validateComponent(COMPONENT_NAME, {
        <%_ if (checkChildrenTypes) { -%>
        allowedTypes: [
            'p',
            'span',
            /* Enter the allowed types here */
        ],
        <%_ } -%>
        <%_ if (checkChildrenNumber) { -%>
        maxChildren: 1 /* Enter the maximum number of children here */,
        <%_ } -%>
        <%_ if (checkChildrenNumber) { -%>
        minChildren: 1 /* Enter the minimum number of children here */,
        <%_ } -%>
        <%_ if (postValidate) { -%>
        postValidate: _postValidate,
        <%_ } -%>
        <%_ if (preValidate) { -%>
        preValidate: _preValidate,
        <%_ } -%>
        props,
        <%_ if (transformChild) { -%>
        transformChild: _transformChild,
        <%_ } -%>
        <%_ if (validateChild) { -%>
        validateChild: _validateChild,
        <%_ } -%>
    });
}

<% } -%>
/////////////////////////////

/**
 * [Enter the description of the component here].
 *
 * @return The component.
 */
const <%= componentName %>: React.FC<<%= componentName %>Props> = ({ children, className = '', ...props }: <%= componentName %>Props): React.ReactElement => {
    <%_ if (validateComponent) { -%>
    const newChildren: React.ReactNode = _validate({ children, ...props });

    <%_ } -%>
    return (
        <div className={classNames(className, handleBasicClasses({ prefix: CLASSNAME }))} {...props}>
            {<% if (validateComponent) { %>newChildren<% } else { %>children<% } %>}
        </div>
    );
};
<%= componentName %>.displayName = COMPONENT_NAME;

/////////////////////////////

export { CLASSNAME, DEFAULT_PROPS, <%= componentName %>, <%= componentName %>Props };
